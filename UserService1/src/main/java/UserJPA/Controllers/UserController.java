package UserJPA.Controllers;

import UserJPA.Entities.Log;
import UserJPA.Entities.UserE;
import UserJPA.Repositories.LogRepository;
import UserJPA.Repositories.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import vo.CustomMessage;
import vo.Exceptions.ItemNotFoundException;
import vo.UserVO;

import java.net.URI;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CountDownLatch;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/users")
@Component
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private LogRepository logRepository;

    //Rabbit receive
    private static final Logger log = LoggerFactory.getLogger(UserController.class);

    private CountDownLatch latch = new CountDownLatch(1);

    private Log log2 = new Log();

    @RabbitListener(queues = RabbitConfiguration.QUEUE_SPECIFIC_NAME)
    public void receiveMessage(final CustomMessage customMessage) {
        log.info("Received message as specific class: {}", customMessage.toString());
        writeLog(customMessage.toString());
    }

    public CountDownLatch getLatch() {
        return latch;
    }

    @GetMapping(path = "/getByUN/{username}")
    public UserE retrieveUser(@PathVariable String username) throws ItemNotFoundException {
        try {
            Optional<UserE> user = userRepository.findByUN(username);
            return user.get();
        }
        catch (NoSuchElementException ex){
            throw new ItemNotFoundException("User with username=" + username + " doesn't exist");
        }
    }

//    @GetMapping(path = "/getRoles/{username}")
//    public Iterable<String> retrieveUserRoles(@PathVariable String username) throws ItemNotFoundException {
//        return userRepository.findRolesByUN(username);
//    }

    @GetMapping(path="/")
    public @ResponseBody
    Iterable<UserE> getAll() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping("/{id}")
    public UserE retrieveUser(@PathVariable long id) throws ItemNotFoundException {
        try {
            Optional<UserE> userE = userRepository.findById(id);
            return userE.get();
        }
        catch (NoSuchElementException ex){
            throw new ItemNotFoundException("User with id=" + id + " doesn't exist");
        }

    }

    @PostMapping("/")
    public ResponseEntity<Object> createUser(@RequestBody UserVO userVO) {
        UserE user = UserE.fromVO(userVO);
        UserE savedUser = userRepository.save(user);

//        roleRepository.save(new Role(user.getUsername(), "ROLE_USER"));
//        if(userVO.getIsadmin())
//            roleRepository.save(new Role(user.getUsername(), "ROLE_ADMIN"));

        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(savedUser.getId()).toUri();

        String message = "User created: " + savedUser.toLog();
        writeLog(message);
        return ResponseEntity.created(location).build();
    }

    @DeleteMapping("/delete/{id}")
    public void deleteUser(@PathVariable long id) {
        try {
            userRepository.deleteById(id);
            String message = "User with id = " + id + " deleted";
            writeLog(message);

        }
        catch (org.springframework.dao.EmptyResultDataAccessException ex){
            String message = "User with id = " + id + " does not exist";
            writeLog(message);
            throw new ItemNotFoundException("Region with id=" + id + " doesn't exist");
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<Object> updateUser(@RequestBody UserVO userVO, @PathVariable Long id) {
        try {
            Optional<UserE> userOptional = userRepository.findById(id);

            if (userOptional.get() == null) ;

            UserE user = UserE.fromVO(userVO);
            user.setId(id);
            userRepository.save(user);

//            userRepository.deleteRoles(user.getUsername());
//            roleRepository.save(new Role(user.getUsername(), "ROLE_USER"));
//            if(userVO.getIsadmin())
//                roleRepository.save(new Role(user.getUsername(), "ROLE_ADMIN"));
            String message = "User updated: " + user.toLog();

            writeLog(message);
            return ResponseEntity.noContent().build();
        }
        catch (NoSuchElementException ex){
            String message = "User with id = " + id + " does not exist";
            writeLog(message);
            throw new ItemNotFoundException("User with id=" + id + " doesn't exist");
        }
    }

    //Logs
    @GetMapping(path="/logs")
    public @ResponseBody
    Iterable<Log> getLogs() {
        // This returns a JSON or XML with the users
        return logRepository.findAll();
    }

    public void writeLog(String message){
        Log log = new Log();
        log.setText(message);
        logRepository.save(log);
    }
}
