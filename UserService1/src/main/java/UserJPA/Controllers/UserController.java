package UserJPA.Controllers;

import UserJPA.Entities.Log;
import UserJPA.Entities.User;
import UserJPA.Repositories.LogRepository;
import UserJPA.Repositories.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import vo.CustomMessage;
import vo.Exceptions.ItemNotFoundException;

import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CountDownLatch;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/users")
@Component
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private LogRepository logRepository;

    //Rabbit receive
    private static final Logger log = LoggerFactory.getLogger(UserController.class);

    private CountDownLatch latch = new CountDownLatch(1);

    private Log log2 = new Log();

    @RabbitListener(queues = RabbitConfiguration.QUEUE_SPECIFIC_NAME)
    public void receiveMessage(final CustomMessage customMessage) {
        log.info("Received message as specific class: {}", customMessage.toString());
        writeLog(customMessage.toString());
    }

    public CountDownLatch getLatch() {
        return latch;
    }

    @GetMapping(path = "/getByUN/{username}")
    public User retrieveUser(@PathVariable String username) throws ItemNotFoundException {
        try {
            Optional<User> user = userRepository.findByUN(username);
            return user.get();
        }
        catch (NoSuchElementException ex){
            throw new ItemNotFoundException("User with username=" + username + " doesn't exist");
        }

    }

    public void writeLog(String message){
        Log log = new Log();
        log.setText(message);
        logRepository.save(log);
    }
}
